#!/usr/bin/env node

/**
 * Test Generate New Password Functionality
 * 
 * This script tests the force generation of new admin passwords
 */

require('dotenv').config({ path: '.env.local' });

const {
    forceGenerateWeeklyPassword,
    getCurrentAdminPassword,
    validateAdminPassword
} = require('../src/lib/services/admin-password');

async function testGenerateNew() {
    console.log('üß™ Testing Generate New Password Functionality...\n');

    try {
        // Test 1: Get current password
        console.log('1Ô∏è‚É£ Getting current password...');
        const currentResult = await getCurrentAdminPassword();

        if (currentResult.success) {
            console.log('‚úÖ Current password retrieved');
            console.log(`üîê Current Password: ${currentResult.password}`);
        } else {
            console.log('‚ùå Failed to get current password:', currentResult.error);
            return;
        }

        const originalPassword = currentResult.password;

        // Test 2: Force generate new password
        console.log('\n2Ô∏è‚É£ Force generating new password...');
        const newResult = await forceGenerateWeeklyPassword();

        if (newResult.success) {
            console.log('‚úÖ New password generated successfully');
            console.log(`üîê New Password: ${newResult.password}`);

            // Check if password actually changed
            if (newResult.password !== originalPassword) {
                console.log('‚úÖ Password successfully changed!');
            } else {
                console.log('‚ö†Ô∏è Password didn\'t change (this might be expected if generating quickly)');
            }
        } else {
            console.log('‚ùå Failed to generate new password:', newResult.error);
            return;
        }

        // Test 3: Validate the new password
        console.log('\n3Ô∏è‚É£ Validating new password...');
        const validationResult = await validateAdminPassword(newResult.password);

        if (validationResult.isValid) {
            console.log('‚úÖ New password validation successful');
        } else {
            console.log('‚ùå New password validation failed:', validationResult.error);
            return;
        }

        // Test 4: Check that old password is no longer valid (if it changed)
        if (originalPassword !== newResult.password) {
            console.log('\n4Ô∏è‚É£ Testing old password is no longer valid...');
            const oldValidationResult = await validateAdminPassword(originalPassword);

            if (!oldValidationResult.isValid) {
                console.log('‚úÖ Old password correctly invalidated');
            } else {
                console.log('‚ö†Ô∏è Old password is still valid (unexpected)');
            }
        }

        console.log('\nüéâ Generate New functionality test completed successfully!\n');

        console.log('üìã Test Summary:');
        console.log('  ‚Ä¢ Force password generation works');
        console.log('  ‚Ä¢ New passwords are properly validated');
        console.log('  ‚Ä¢ System correctly handles password regeneration');

    } catch (error) {
        console.error('‚ùå Test failed with error:', error);
        process.exit(1);
    }
}

// Run the test
if (require.main === module) {
    testGenerateNew().then(() => {
        console.log('\n‚úÖ Test completed successfully!');
        process.exit(0);
    }).catch((error) => {
        console.error('\n‚ùå Test failed:', error);
        process.exit(1);
    });
}

module.exports = { testGenerateNew };
